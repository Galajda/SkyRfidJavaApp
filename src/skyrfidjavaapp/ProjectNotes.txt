***Description***
Features: Only reading is implemented. Manual control of read command. Raw hex output to console 
    plus decoded number in application window.

Why use enums and constant strings for app state? Enums control value of fcn arguments. 
    Constant strings reduce spelling errors.

The logic of the AppState. The default state is managed through a settings screen that has not been
    implemented yet. When the program launches, or when reset is chosen from the file menu, the 
    default values are copied to the current values. The current values are always used to load panes.
    Each pane is responsible for retrieving app state and configuring accordingly. When a pane
    changes the state, it must notify the application by calling loadRootPane().

Control of device port. I cannot find a good place to close the port. For now, I will open and 
    close it for each read operation.
    Rearrange reader functions for greater speed. One instance of reader for the read pane.
    Open the port when the timer starts. Close the port when the timer stops.
How to coordinate change of app state with change of panes?
    1) When the user clicks a radio button, the state and the panes must change. Let the AppState
        setSettings... fcns change the panes to ensure that it is done.
    2) When the user changes the default settings (not yet implemented), the panes do not 
        need to be changed. Let the button event handlers change app state and panes as separate commands.
    3) Let the app state decide if the panes need to be reloaded by checking the settings category 
        that is being changed.
    I choose 2.
The timer task must complete before the next timer event fires.
    There is no harm in calling cancel() multiple times.


Should I use the dll's hex_a and a_hex functions to convert data?

***Problems***
Unsatisfied Link Error. Cannot load umf.dll. 
    Solution: SO 30767478 says that the dll must be in SysWOW64 folder
    when running a 32-bit JRE on a 64-bit computer. (I think this is the explanation.)
    Previous versions have used other workarounds, such as putting the dll in the root 
    directory, which did not work in this application for an unknown reason.

AppState file path may not work when packaged as jar.

Auto-read timer runs after the read pane is changed.
    Solution: Keep one instance of each pane in the SkyRfidJavaApp class. Create a flag 
    to stop the timer. Create a method of the ReadPane class that changes this flag.
    Create switch pane method in SkyRfidJavaApp. When panes are switched, turn the timer on and off.
RF.exe shows AFI. How does it read this value? I see only functions to write the value.

What if a tag leaves the field during the read?

Multiple tags
    Timer must adjust to number of cards read so that all can be shown before next read.

dll functions
    does stay quiet state persist after tag leaves field?
    how does multi read work? 


    